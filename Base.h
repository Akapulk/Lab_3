#pragma once

/* базовый абстрактный класс, так как в нем присутствует хотя бы одная чистая виртуальная функция
Важно!
1) Так как у нас есть виртуальная функция, то и деструктор должен быть виртульным, чтобы не было утечек данных (если выделять
память под объекты классов наследников динамически, то в случае отсутствия виртуального деструктора в базовом классе будет
для каждого класса наследника вызваться деструктор базового класса, что недопустимо. Но если же деструктор в базовом классе
будет виртуальным, то он будет присутствовать в таблице виртульных функций и для каждого класса-наследника деструктор в
таблице виртуальных функций переопределится и вызовется свой собственный деструктор)

2) НЕЛЬЗЯ создавать объекты абстрактных классов! 

3) У чистой виртуальной функции нет реализации

4) Есть ключевое слово override. override используется в классе-потомке, чтобы указать что функция должна переопределять виртуальную функцию, 
объявленную в базовом классе. Это позволяет избавиться от ошибок, когда из-за опечатки вместо переопределения существующей виртуальной функции
была создана новая (с другим именем или сигнатурой)*/

class Base
{
/*так как для двух классов-наследников нужны будут два параметра и они одинаковые, то помещаем их в базовый класс. А лежат они в поле
protected для того, чтобы классы-наследники могли к ним обращаться. Если они лежали бы в поле private, то они были бы недоступны в 
классах-наследниках*/
protected:
	double first_element; //первый элемент
	double difference; //постоянная разность (для арифметической) и постоянное отношение (для геометрической).
public: 
	virtual ~Base() {}; //виртуальный деструктор

	//чистая виртульная функция для вычисления суммы, в качестве параметра принимает количество первых элементов, сумму которых надо посчитать
	virtual void sum(int size) = 0;
};

//отсутствует cpp файл для этого класса, так как описывать нечего
//все классы будут наследоваться как public для простоты работы 